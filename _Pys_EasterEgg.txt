#参考：入門 Python 3, Bill Lubanovic 著, 斎藤 康毅 監訳, 長尾 高弘 訳, オライリー・ジャパン

*対話型でimport this を実行すると, Python哲学を表現した自由詩が見れる

[実行例]
$ python
Python 2.7.10 (default, Jul 30 2016, 18:31:42) 
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
>>>exit()

[訳]

『 Python公案（Tim Peters作）

醜いより美しい方がいい。
暗黙より明示の方がいい。
複雑より単純の方がいい。
極端な複雑よりただの複雑の方がいい。
入れ子よりフラットの方がいい。
密よりも疎の方がいい。

読みやすさは大切だ。

特殊条件だからといって原則を破っていいわけではないが、
実用性は純粋性に勝る。

わざと黙らされている場合を除き、
無言でエラーを次に渡してはならない。

曖昧なものが出てきたときに推測に頼るな。

仕事をするための当然の方法はひとつある。むしろ、ひとつだけだと言いたいところだ。

ただし、オランダ人でなければ、最初からその方法を当然とは思わないかもしれないが。

今するのはしないままよりもいい。
もっとも、しないままの方が慌てて今すぐするよりいいことが多い。

実装を説明するのが難しいなら、それは悪いアイデアだ。
名前空間はすばらしいアイデアのひとつだ。もっとアイデアを出そう！

（『入門 Python 3, オラーリー・ジャパン』）』

